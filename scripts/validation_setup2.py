#!/usr/bin/env python3
"""
Validate Setup - DOCUFIND
Valida que las configuraciones de Google APIs y Email est√©n correctas
"""

import os
import sys
import json
import asyncio
import imaplib
import ssl
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List, Tuple

# Agregar src al path para imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))


try:
    from config_manager import ConfigManager
    from email_processor import EmailProcessor, EmailCredentials,EmailConfig
    from google_drive_client import GoogleDriveClient, GoogleServicesConfig
    from test_google_services import test_google_services
    

except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("üí° Aseg√∫rate de ejecutar desde la carpeta ra√≠z del proyecto")
    sys.exit(1)

class SetupValidator:
    """Validador completo de configuraci√≥n"""
    
    def __init__(self):
        self.results = {
            'config_file': False,
            'google_credentials': False,
            'google_connection': False,
            'email_credentials': False,
            'email_connection': False,
            'overall_status': 'FAILED'
        }
        
        self.detailed_results = {}
        self.config_manager = None
    
    async def run_complete_validation(self):
        """Ejecuta validaci√≥n completa del setup"""
        print("üîç DOCUFIND - Validador de Configuraci√≥n")
        print("=" * 60)
        print(f"üìÖ Ejecutado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # Paso 1: Validar archivo de configuraci√≥n
        await self._validate_config_file()
        
        # Paso 2: Validar credenciales de Google
        await self._validate_google_credentials()
        
        # Paso 3: Validar conexi√≥n con Google APIs
        if self.results['google_credentials']:
            await self._validate_google_connection()
        
        # Paso 4: Validar credenciales de email
        if self.results['config_file']:
            await self._validate_email_credentials()
        
        # Paso 5: Validar conexi√≥n de email
        if self.results['email_credentials']:
            await self._validate_email_connection()
        
        # Mostrar resumen final
        self._show_final_summary()
        
        # Determinar estado general
        self._calculate_overall_status()
        
        return self.results
    
    async def _validate_config_file(self):
        """Valida el archivo de configuraci√≥n principal"""
        print("1Ô∏è‚É£  VALIDANDO ARCHIVO DE CONFIGURACI√ìN")
        print("-" * 40)
        
        try:
            # Buscar archivo de configuraci√≥n
            config_paths = [
                "config/config.json",
                "config.json",
                "../config/config.json"
            ]
            
            config_path = None
            for path in config_paths:
                if os.path.exists(path):
                    config_path = path
                    break
            
            if not config_path:
                print("‚ùå Archivo config.json no encontrado en:")
                for path in config_paths:
                    print(f"   - {os.path.abspath(path)}")
                print()
                print("üí° Crear archivo con: cp config.json.template config/config.json")
                return
            
            # Cargar y validar configuraci√≥n
            self.config_manager = ConfigManager(config_path)
            config = self.config_manager.load_config()
            
            print(f"‚úÖ Archivo encontrado: {os.path.abspath(config_path)}")
            
            # Validar estructura
            validation_result ='valid'
           # validation_result = self.config_manager.validate_current_config()
           # 
           # if validation_result['valid']:
           #     print("‚úÖ Estructura de configuraci√≥n v√°lida")
           #     self.results['config_file'] = True
           #     
           #     # Mostrar resumen
           #     summary = self.config_manager.get_config_summary()
           #     print(f"üìß Email: {summary['email']['username']}")
           #     print(f"üìÖ Rango: {summary['search']['date_range']}")
           #     print(f"üîç Palabras clave: {', '.join(summary['search']['keywords'][:3])}...")
           #     print(f"üìÅ Carpeta: {summary['search']['folder_name']}")
           #     
           # else:
           #     print("‚ùå Errores en configuraci√≥n:")
           #     for error in validation_result['errors']:
           #         print(f"   - {error}")
                
            self.detailed_results['config'] = validation_result
            
        except Exception as e:
            print(f"‚ùå Error validando configuraci√≥n: {e}")
            self.detailed_results['config'] = {'error': str(e)}
        
        print()
    
    async def _validate_google_credentials(self):
        """Valida las credenciales de Google"""
        print("2Ô∏è‚É£  VALIDANDO CREDENCIALES DE GOOGLE")
        print("-" * 40)
        
        if not self.config_manager:
            print("‚ùå Configuraci√≥n no cargada, saltando validaci√≥n Google")
            print()
            return
        
        try:
            google_config = self.config_manager.get_google_config()
            
            # Verificar archivo credentials.json
            creds_path = google_config.credentials_path
            if not os.path.exists(creds_path):
                print(f"‚ùå Archivo credentials.json no encontrado: {creds_path}")
                print()
                print("üí° Pasos para configurar Google APIs:")
                print("   1. Ir a: https://console.cloud.google.com/")
                print("   2. Crear proyecto o seleccionar existente")
                print("   3. Habilitar APIs: Google Drive API, Google Sheets API")
                print("   4. Crear credenciales OAuth2 para 'Aplicaci√≥n de escritorio'")
                print("   5. Descargar JSON y guardarlo como credentials.json")
                print()
                return
            
            print(f"‚úÖ Archivo credentials.json encontrado: {os.path.abspath(creds_path)}")
            
            # Validar contenido del archivo
            with open(creds_path, 'r') as f:
                creds_data = json.load(f)
            
            if 'installed' not in creds_data and 'web' not in creds_data:
                print("‚ùå Formato de credentials.json inv√°lido")
                print("üí° Debe contener secci√≥n 'installed' para aplicaciones de escritorio")
                return
            
            creds_section = creds_data.get('installed', creds_data.get('web', {}))
            required_fields = ['client_id', 'client_secret', 'auth_uri', 'token_uri']
            
            missing_fields = [field for field in required_fields if field not in creds_section]
            if missing_fields:
                print(f"‚ùå Campos faltantes en credentials.json: {', '.join(missing_fields)}")
                return
            
            print("‚úÖ Estructura de credentials.json v√°lida")
            print(f"üîë Client ID: {creds_section['client_id'][:20]}...")
            print(f"üåê Proyecto: {creds_section.get('project_id', 'N/A')}")
            
            # Verificar token existente
            token_path = google_config.token_path
            if os.path.exists(token_path):
                print(f"‚úÖ Token OAuth2 encontrado: {os.path.abspath(token_path)}")
                
                # Verificar validez del token
                try:
                    with open(token_path, 'r') as f:
                        token_data = json.load(f)
                    
                    if 'token' in token_data and 'refresh_token' in token_data:
                        print("‚úÖ Token contiene refresh_token (reutilizable)")
                    else:
                        print("‚ö†Ô∏è  Token puede necesitar renovaci√≥n")
                        
                except json.JSONDecodeError:
                    print("‚ö†Ô∏è  Token corrupto, se regenerar√° autom√°ticamente")
            else:
                print(f"‚ö†Ô∏è  Token no existe a√∫n: {os.path.abspath(token_path)}")
                print("üí° Se crear√° autom√°ticamente en la primera conexi√≥n")
            
            self.results['google_credentials'] = True
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Error parseando credentials.json: {e}")
        except Exception as e:
            print(f"‚ùå Error validando credenciales Google: {e}")
        
        print()
    
    async def _validate_google_connection(self):
        """Valida la conexi√≥n con Google APIs"""
        print("3Ô∏è‚É£  VALIDANDO CONEXI√ìN CON GOOGLE APIS")
        print("-" * 40)
        
        try:
            google_config = self.config_manager.get_google_config()
            
            print("üîå Probando conexi√≥n con Google APIs...")
            print("   (Esto puede abrir un navegador para autorizaci√≥n)")
            
            # Probar servicios de Google
            test_result = await test_google_services(
                google_config.credentials_path,
                google_config.token_path
            )
            
            if test_result['success']:
                print("‚úÖ Conexi√≥n exitosa con Google APIs")
                print(f"üë§ Usuario: {test_result['user_name']} ({test_result['user_email']})")
                
                # Mostrar info de almacenamiento si est√° disponible
                if test_result.get('storage_used') != 'Unknown':
                    used = self._format_bytes(test_result['storage_used'])
                    limit = self._format_bytes(test_result['storage_limit'])
                    print(f"üíæ Almacenamiento: {used} / {limit}")
                
                print("üîß Servicios disponibles:")
                services = test_result.get('services', {})
                if services.get('drive'):
                    print("   ‚úÖ Google Drive API")
                if services.get('sheets'):
                    print("   ‚úÖ Google Sheets API")
                
                self.results['google_connection'] = True
                
            else:
                print(f"‚ùå Error conectando con Google APIs: {test_result['error']}")
                print()
                print("üí° Posibles soluciones:")
                print("   1. Verificar que las APIs est√©n habilitadas en Google Cloud Console")
                print("   2. Verificar que el archivo credentials.json sea correcto")
                print("   3. Intentar eliminar token.json para forzar re-autenticaci√≥n")
            
            self.detailed_results['google_connection'] = test_result
            
        except Exception as e:
            print(f"‚ùå Error probando conexi√≥n Google: {e}")
            self.detailed_results['google_connection'] = {'error': str(e)}
        
        print()
    
    async def _validate_email_credentials(self):
        """Valida las credenciales de email"""
        print("4Ô∏è‚É£  VALIDANDO CREDENCIALES DE EMAIL")
        print("-" * 40)
        
        try:
            email_config = self.config_manager.get_email_config()
            
            print(f"üìß Servidor: {email_config.server}:{email_config.port}")
            print(f"üë§ Usuario: {email_config.username}")
            print(f"üîí Password: {'*' * len(email_config.password)} ({len(email_config.password)} caracteres)")
            
            # Validar formato b√°sico
            validation_errors = email_config.validate()
            if validation_errors:
                print("‚ùå Errores en configuraci√≥n de email:")
                for error in validation_errors:
                    print(f"   - {error}")
                return
            
            # Verificar que no sean valores por defecto
            if not email_config.username or email_config.username == "tu-email@gmail.com":
                print("‚ùå Email username no configurado o es valor por defecto")
                return
            
            if not email_config.password or email_config.password == "tu-app-password":
                print("‚ùå Password no configurado o es valor por defecto")
                return
            
            print("‚úÖ Credenciales de email b√°sicas v√°lidas")
            
            # Mostrar recomendaciones por proveedor
            domain = email_config.username.split('@')[-1].lower()
            if domain == 'gmail.com':
                print("üí° Gmail detectado:")
                print("   - Aseg√∫rate de usar App Password (no contrase√±a normal)")
                print("   - 2FA debe estar habilitado")
                print("   - Crear App Password en: https://myaccount.google.com/apppasswords")
            elif domain in ['outlook.com', 'hotmail.com']:
                print("üí° Outlook/Hotmail detectado:")
                print("   - Puede requerir App Password")
                print("   - Verificar configuraci√≥n en: https://account.microsoft.com/security")
            
            self.results['email_credentials'] = True
            
        except Exception as e:
            print(f"‚ùå Error validando credenciales de email: {e}")
        
        print()
    
    async def _validate_email_connection(self):
        """Valida la conexi√≥n con el servidor de email"""
        print("5Ô∏è‚É£  VALIDANDO CONEXI√ìN DE EMAIL")
        print("-" * 40)
        
        try:
            email_config = self.config_manager.get_email_config()
            
            print("üîå Probando conexi√≥n con servidor de email...")
            
            # Crear credenciales para EmailProcessor
            email_creds = EmailCredentials(
                server=email_config.server,
                port=email_config.port,
                username=email_config.username,
                password=email_config.password
            )
            
            # Probar conexi√≥n
            email_processor = EmailProcessor(email_creds)
            test_result = await email_processor.test_connection()
            
            if test_result['success']:
                print("‚úÖ Conexi√≥n exitosa con servidor de email")
                print(f"üì¨ Total emails en INBOX: {test_result['total_emails_in_inbox']:,}")
                print(f"üåê Servidor: {test_result['server_info']}")
                
                self.results['email_connection'] = True
                
                # Test adicional: buscar algunos emails recientes
                print()
                print("üîç Probando b√∫squeda b√°sica de emails...")
                try:
                    from email_processor import EmailFilter
                    from datetime import datetime, timedelta
                    
                    # Buscar emails de los √∫ltimos 7 d√≠as
                    end_date = datetime.now()
                    start_date = end_date - timedelta(days=7)
                    
                    test_filter = EmailFilter(
                        start_date=start_date.strftime('%Y-%m-%d'),
                        end_date=end_date.strftime('%Y-%m-%d'),
                        keywords=['the', 'and', 'or']  # Palabras comunes para encontrar algo
                    )
                    
                    await email_processor.connect()
                    recent_emails = await email_processor.search_emails(test_filter)
                    await email_processor.disconnect()
                    
                    print(f"‚úÖ B√∫squeda de prueba exitosa: {len(recent_emails)} emails encontrados")
                    
                except Exception as search_error:
                    print(f"‚ö†Ô∏è  Advertencia en b√∫squeda de prueba: {search_error}")
                
            else:
                print(f"‚ùå Error conectando con email: {test_result['error']}")
                print()
                print("üí° Posibles soluciones:")
                print("   1. Verificar credenciales de email")
                print("   2. Para Gmail: usar App Password en lugar de contrase√±a normal")
                print("   3. Verificar que IMAP est√© habilitado en tu cuenta")
                print("   4. Revisar configuraci√≥n de servidor y puerto")
                
            self.detailed_results['email_connection'] = test_result
            
        except Exception as e:
            print(f"‚ùå Error probando conexi√≥n de email: {e}")
            self.detailed_results['email_connection'] = {'error': str(e)}
        
        print()
    
    def _format_bytes(self, size_str: str) -> str:
        """Formatea bytes en formato legible"""
        try:
            size = int(size_str)
            for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
                if size < 1024.0:
                    return f"{size:.1f} {unit}"
                size /= 1024.0
            return f"{size:.1f} PB"
        except (ValueError, TypeError):
            return str(size_str)
    
    def _show_final_summary(self):
        """Muestra resumen final de validaci√≥n"""
        print("üìä RESUMEN DE VALIDACI√ìN")
        print("=" * 60)
        
        checks = [
            ("Archivo de configuraci√≥n", self.results['config_file']),
            ("Credenciales de Google", self.results['google_credentials']),
            ("Conexi√≥n Google APIs", self.results['google_connection']),
            ("Credenciales de email", self.results['email_credentials']),
            ("Conexi√≥n de email", self.results['email_connection'])
        ]
        
        for check_name, status in checks:
            icon = "‚úÖ" if status else "‚ùå"
            print(f"{icon} {check_name}")
        
        print()
    
    def _calculate_overall_status(self):
        """Calcula estado general del setup"""
        required_checks = [
            self.results['config_file'],
            self.results['google_credentials'],
            self.results['email_credentials']
        ]
        
        optional_checks = [
            self.results['google_connection'],
            self.results['email_connection']
        ]
        
        if all(required_checks) and all(optional_checks):
            self.results['overall_status'] = 'READY'
            status_msg = "üéâ ¬°CONFIGURACI√ìN COMPLETA!"
            color = "green"
        elif all(required_checks):
            self.results['overall_status'] = 'PARTIAL'
            status_msg = "‚ö†Ô∏è  CONFIGURACI√ìN PARCIAL"
            color = "yellow" 
        else:
            self.results['overall_status'] = 'FAILED'
            status_msg = "‚ùå CONFIGURACI√ìN INCOMPLETA"
            color = "red"
        
        print("üéØ ESTADO FINAL")
        print("=" * 60)
        print(status_msg)
        print()
        
        if self.results['overall_status'] == 'READY':
            print("‚ú® Tu configuraci√≥n est√° lista para ejecutar DOCUFIND")
            print("üöÄ Comando para ejecutar:")
            print("   python src/find-documents-main.py")
            
        elif self.results['overall_status'] == 'PARTIAL':
            print("‚öôÔ∏è  Configuraci√≥n b√°sica lista, pero hay advertencias")
            print("üí° Puedes intentar ejecutar el programa, pero puede haber errores")
            
        else:
            print("üîß Completa la configuraci√≥n antes de ejecutar el programa")
            print()
            print("üìã PR√ìXIMOS PASOS:")
            
            if not self.results['config_file']:
                print("   1. Crear y configurar config/config.json")
                
            if not self.results['google_credentials']:
                print("   2. Configurar Google APIs y descargar credentials.json")
                
            if not self.results['email_credentials']:
                print("   3. Configurar credenciales de email en config.json")
        
        print()

# Funci√≥n de ayuda
def show_setup_help():
    """Muestra ayuda para configurar el sistema"""
    print("üìö GU√çA DE CONFIGURACI√ìN R√ÅPIDA")
    print("=" * 60)
    print()
    
    print("üîß 1. CONFIGURAR GOOGLE APIS:")
    print("   ‚Ä¢ Ir a: https://console.cloud.google.com/")
    print("   ‚Ä¢ Crear proyecto nuevo")
    print("   ‚Ä¢ Habilitar: Google Drive API, Google Sheets API")
    print("   ‚Ä¢ Crear credenciales OAuth2 para 'Aplicaci√≥n de escritorio'")
    print("   ‚Ä¢ Descargar JSON y guardar como config/credentials.json")
    print()
    
    print("üìß 2. CONFIGURAR EMAIL:")
    print("   ‚Ä¢ Para Gmail: Habilitar 2FA y crear App Password")
    print("   ‚Ä¢ Editar config/config.json con:")
    print("     - email_credentials.username: tu-email@gmail.com")
    print("     - email_credentials.password: tu-app-password")
    print()
    
    print("üìã 3. CONFIGURAR B√öSQUEDA:")
    print("   ‚Ä¢ Editar config/config.json con:")
    print("     - search_parameters.start_date: 2024-01-01")
    print("     - search_parameters.end_date: 2024-12-31")
    print("     - search_parameters.keywords: ['factura', 'invoice']")
    print("     - search_parameters.folder_name: MisCarpeta2024")
    print()

# Funci√≥n principal
async def main():
    """Funci√≥n principal del validador"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Validar configuraci√≥n de DOCUFIND')
    parser.add_argument('--help-setup', action='store_true', 
                       help='Mostrar gu√≠a de configuraci√≥n')
    parser.add_argument('--save-report', action='store_true',
                       help='Guardar reporte de validaci√≥n en archivo')
    
    args = parser.parse_args()
    
    if args.help_setup:
        show_setup_help()
        return
    
    # Ejecutar validaci√≥n
    validator = SetupValidator()
    results = await validator.run_complete_validation()
    
    # Guardar reporte si se solicita
    if args.save_report:
        report_path = f"validation_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'results': results,
            'detailed_results': validator.detailed_results
        }
        
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            print(f"üìÑ Reporte guardado: {report_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Error guardando reporte: {e}")
    
    # C√≥digo de salida basado en resultado
    if results['overall_status'] == 'READY':
        sys.exit(0)  # √âxito
    elif results['overall_status'] == 'PARTIAL':
        sys.exit(1)  # Advertencia
    else:
        sys.exit(2)  # Error

if __name__ == "__main__":
    asyncio.run(main())